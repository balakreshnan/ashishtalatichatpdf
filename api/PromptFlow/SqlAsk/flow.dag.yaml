id: template_standard_flow
name: Template Standard Flow
environment:
  python_requirements_txt: requirements.txt
inputs:
  embeddingModelType:
    type: string
    default: azureopenai
  question:
    type: string
    default: How many customers did placed an order?
  top:
    type: int
    default: 10
  postBody:
    type: object
    default:
      values:
      - recordId: 0
        data:
          text: ""
outputs:
  output:
    type: string
    reference: ${followup_questions.output}
  answer:
    type: string
    reference: ${followup_questions.output.values[0].data.answer}
  context:
    type: string
    reference: ${followup_questions.output.values[0].data.thoughts}
nodes:
- name: parse_postBody
  type: python
  source:
    type: code
    path: parse_postBody.py
  inputs:
    postBody: ${inputs.postBody}
- name: isQuery
  type: python
  source:
    type: code
    path: isQuery.py
  inputs:
    question: ${inputs.question}
    tableSchema: ${generateTableSchema.output}
    conn: entaoai
- name: create_llm
  type: python
  source:
    type: code
    path: create_llm.py
  inputs:
    embeddingModelType: ${inputs.embeddingModelType}
    conn: entaoai
  skip:
    when: ${isQuery.output.validQuestion}
    is: false
    return: ""
- name: generateTableSchema
  type: python
  source:
    type: code
    path: generateTableSchema.py
  inputs:
    conn: entaoai
- name: generateSql
  type: python
  source:
    type: code
    path: generateSql.py
  inputs:
    question: ${inputs.question}
    conn: entaoai
    tableSchema: ${generateTableSchema.output}
  skip:
    when: ${isQuery.output.validQuestion}
    is: false
    return: ""
- name: executeQuery
  type: python
  source:
    type: code
    path: executeQuery.py
  inputs:
    sqlQuery: ${generateSql.output}
    conn: entaoai
  skip:
    when: ${isQuery.output.validQuestion}
    is: false
    return: ""
- name: generateNlp
  type: python
  source:
    type: code
    path: generateNlp.py
  inputs:
    question: ${inputs.question}
    conn: entaoai
    sqlResult: ${executeQuery.output}
  skip:
    when: ${isQuery.output.validQuestion}
    is: false
    return: ""
- name: followup_questions
  type: python
  source:
    type: code
    path: followup_questions.py
  inputs:
    formattedAnswer: ${generateNlp.output}
    tableSchema: ${generateTableSchema.output}
    sqlQuery: ${generateSql.output}
    sqlResult: ${executeQuery.output}
    llm: ${create_llm.output}
    isQuery: ${isQuery.output.validQuestion}
